<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="341.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="341.00"> </text><svg id="frames" x="10" width="1180" total_samples="50836"><g><title>libsystem_malloc.dylib`0x7ff8191500dc (8 samples, 0.02%)</title><rect x="0.0216%" y="213" width="0.0157%" height="15" fill="rgb(227,0,7)" fg:x="11" fg:w="8"/><text x="0.2716%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191500e1 (9 samples, 0.02%)</title><rect x="0.0374%" y="213" width="0.0177%" height="15" fill="rgb(217,0,24)" fg:x="19" fg:w="9"/><text x="0.2874%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191500eb (6 samples, 0.01%)</title><rect x="0.0570%" y="213" width="0.0118%" height="15" fill="rgb(221,193,54)" fg:x="29" fg:w="6"/><text x="0.3070%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819150101 (8 samples, 0.02%)</title><rect x="0.0826%" y="213" width="0.0157%" height="15" fill="rgb(248,212,6)" fg:x="42" fg:w="8"/><text x="0.3326%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819150105 (10 samples, 0.02%)</title><rect x="0.0984%" y="213" width="0.0197%" height="15" fill="rgb(208,68,35)" fg:x="50" fg:w="10"/><text x="0.3484%" y="223.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$__bzero (16 samples, 0.03%)</title><rect x="0.1279%" y="213" width="0.0315%" height="15" fill="rgb(232,128,0)" fg:x="65" fg:w="16"/><text x="0.3779%" y="223.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (8 samples, 0.02%)</title><rect x="0.1593%" y="213" width="0.0157%" height="15" fill="rgb(207,160,47)" fg:x="81" fg:w="8"/><text x="0.4093%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (12 samples, 0.02%)</title><rect x="0.1751%" y="213" width="0.0236%" height="15" fill="rgb(228,23,34)" fg:x="89" fg:w="12"/><text x="0.4251%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (47 samples, 0.09%)</title><rect x="0.1987%" y="213" width="0.0925%" height="15" fill="rgb(218,30,26)" fg:x="101" fg:w="47"/><text x="0.4487%" y="223.50"></text></g><g><title>redirs`DYLD-STUB$$__bzero (10 samples, 0.02%)</title><rect x="0.2990%" y="213" width="0.0197%" height="15" fill="rgb(220,122,19)" fg:x="152" fg:w="10"/><text x="0.5490%" y="223.50"></text></g><g><title>redirs`DYLD-STUB$$memcpy (8 samples, 0.02%)</title><rect x="0.3226%" y="213" width="0.0157%" height="15" fill="rgb(250,228,42)" fg:x="164" fg:w="8"/><text x="0.5726%" y="223.50"></text></g><g><title>redirs`redirs::message::parse::parse_message (13 samples, 0.03%)</title><rect x="0.3698%" y="213" width="0.0256%" height="15" fill="rgb(240,193,28)" fg:x="188" fg:w="13"/><text x="0.6198%" y="223.50"></text></g><g><title>libsystem_c.dylib`0x7ff8191c29d7 (6 samples, 0.01%)</title><rect x="5.6299%" y="197" width="0.0118%" height="15" fill="rgb(216,20,37)" fg:x="2862" fg:w="6"/><text x="5.8799%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (16,596 samples, 32.65%)</title><rect x="5.6417%" y="197" width="32.6462%" height="15" fill="rgb(206,188,39)" fg:x="2868" fg:w="16596"/><text x="5.8917%" y="207.50">libsystem_kernel.dylib`__recvfrom</text></g><g><title>libsystem_malloc.dylib`0x7ff819125170 (23 samples, 0.05%)</title><rect x="38.2878%" y="197" width="0.0452%" height="15" fill="rgb(217,207,13)" fg:x="19464" fg:w="23"/><text x="38.5378%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81912517a (14 samples, 0.03%)</title><rect x="38.3429%" y="197" width="0.0275%" height="15" fill="rgb(231,73,38)" fg:x="19492" fg:w="14"/><text x="38.5929%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125c2d (10 samples, 0.02%)</title><rect x="38.3822%" y="197" width="0.0197%" height="15" fill="rgb(225,20,46)" fg:x="19512" fg:w="10"/><text x="38.6322%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191467de (17 samples, 0.03%)</title><rect x="38.4216%" y="197" width="0.0334%" height="15" fill="rgb(210,31,41)" fg:x="19532" fg:w="17"/><text x="38.6716%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191468aa (12 samples, 0.02%)</title><rect x="38.4845%" y="197" width="0.0236%" height="15" fill="rgb(221,200,47)" fg:x="19564" fg:w="12"/><text x="38.7345%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (10 samples, 0.02%)</title><rect x="38.4885%" y="181" width="0.0197%" height="15" fill="rgb(226,26,5)" fg:x="19566" fg:w="10"/><text x="38.7385%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81914694d (6 samples, 0.01%)</title><rect x="38.5219%" y="197" width="0.0118%" height="15" fill="rgb(249,33,26)" fg:x="19583" fg:w="6"/><text x="38.7719%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819146983 (21 samples, 0.04%)</title><rect x="38.5416%" y="197" width="0.0413%" height="15" fill="rgb(235,183,28)" fg:x="19593" fg:w="21"/><text x="38.7916%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81914f643 (8 samples, 0.02%)</title><rect x="38.6045%" y="197" width="0.0157%" height="15" fill="rgb(221,5,38)" fg:x="19625" fg:w="8"/><text x="38.8545%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81914f64a (14 samples, 0.03%)</title><rect x="38.6203%" y="197" width="0.0275%" height="15" fill="rgb(247,18,42)" fg:x="19633" fg:w="14"/><text x="38.8703%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81914f64c (6 samples, 0.01%)</title><rect x="38.6478%" y="197" width="0.0118%" height="15" fill="rgb(241,131,45)" fg:x="19647" fg:w="6"/><text x="38.8978%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81914f654 (14 samples, 0.03%)</title><rect x="38.6596%" y="197" width="0.0275%" height="15" fill="rgb(249,31,29)" fg:x="19653" fg:w="14"/><text x="38.9096%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81914f65d (7 samples, 0.01%)</title><rect x="38.6872%" y="197" width="0.0138%" height="15" fill="rgb(225,111,53)" fg:x="19667" fg:w="7"/><text x="38.9372%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81914f660 (15 samples, 0.03%)</title><rect x="38.7009%" y="197" width="0.0295%" height="15" fill="rgb(238,160,17)" fg:x="19674" fg:w="15"/><text x="38.9509%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81914f677 (8 samples, 0.02%)</title><rect x="38.7442%" y="197" width="0.0157%" height="15" fill="rgb(214,148,48)" fg:x="19696" fg:w="8"/><text x="38.9942%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191500dc (10 samples, 0.02%)</title><rect x="38.7875%" y="197" width="0.0197%" height="15" fill="rgb(232,36,49)" fg:x="19718" fg:w="10"/><text x="39.0375%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191500e1 (6 samples, 0.01%)</title><rect x="38.8071%" y="197" width="0.0118%" height="15" fill="rgb(209,103,24)" fg:x="19728" fg:w="6"/><text x="39.0571%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191500eb (8 samples, 0.02%)</title><rect x="38.8189%" y="197" width="0.0157%" height="15" fill="rgb(229,88,8)" fg:x="19734" fg:w="8"/><text x="39.0689%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819150101 (9 samples, 0.02%)</title><rect x="38.8563%" y="197" width="0.0177%" height="15" fill="rgb(213,181,19)" fg:x="19753" fg:w="9"/><text x="39.1063%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819150105 (17 samples, 0.03%)</title><rect x="38.8740%" y="197" width="0.0334%" height="15" fill="rgb(254,191,54)" fg:x="19762" fg:w="17"/><text x="39.1240%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (176 samples, 0.35%)</title><rect x="38.9468%" y="197" width="0.3462%" height="15" fill="rgb(241,83,37)" fg:x="19799" fg:w="176"/><text x="39.1968%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (68 samples, 0.13%)</title><rect x="39.2930%" y="197" width="0.1338%" height="15" fill="rgb(233,36,39)" fg:x="19975" fg:w="68"/><text x="39.5430%" y="207.50"></text></g><g><title>redirs`&lt;std::net::tcp::TcpStream as std::io::Read&gt;::read_buf (243 samples, 0.48%)</title><rect x="39.4504%" y="197" width="0.4780%" height="15" fill="rgb(226,3,54)" fg:x="20055" fg:w="243"/><text x="39.7004%" y="207.50"></text></g><g><title>redirs`DYLD-STUB$$memcpy (7 samples, 0.01%)</title><rect x="39.9323%" y="197" width="0.0138%" height="15" fill="rgb(245,192,40)" fg:x="20300" fg:w="7"/><text x="40.1823%" y="207.50"></text></g><g><title>redirs`__rdl_alloc (22 samples, 0.04%)</title><rect x="39.9481%" y="197" width="0.0433%" height="15" fill="rgb(238,167,29)" fg:x="20308" fg:w="22"/><text x="40.1981%" y="207.50"></text></g><g><title>redirs`__rdl_dealloc (16 samples, 0.03%)</title><rect x="39.9913%" y="197" width="0.0315%" height="15" fill="rgb(232,182,51)" fg:x="20330" fg:w="16"/><text x="40.2413%" y="207.50"></text></g><g><title>redirs`__rust_dealloc (17 samples, 0.03%)</title><rect x="40.0307%" y="197" width="0.0334%" height="15" fill="rgb(231,60,39)" fg:x="20350" fg:w="17"/><text x="40.2807%" y="207.50"></text></g><g><title>redirs`core::fmt::num::imp::_&lt;impl core::fmt::Display for u64&gt;::fmt (11 samples, 0.02%)</title><rect x="40.0641%" y="197" width="0.0216%" height="15" fill="rgb(208,69,12)" fg:x="20367" fg:w="11"/><text x="40.3141%" y="207.50"></text></g><g><title>redirs`core::ptr::drop_in_place&lt;redirs::message::message::Message&gt; (27 samples, 0.05%)</title><rect x="40.0858%" y="197" width="0.0531%" height="15" fill="rgb(235,93,37)" fg:x="20378" fg:w="27"/><text x="40.3358%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125207 (19 samples, 0.04%)</title><rect x="40.2372%" y="181" width="0.0374%" height="15" fill="rgb(213,116,39)" fg:x="20455" fg:w="19"/><text x="40.4872%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125224 (11 samples, 0.02%)</title><rect x="40.2746%" y="181" width="0.0216%" height="15" fill="rgb(222,207,29)" fg:x="20474" fg:w="11"/><text x="40.5246%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81912532f (18 samples, 0.04%)</title><rect x="40.3454%" y="181" width="0.0354%" height="15" fill="rgb(206,96,30)" fg:x="20510" fg:w="18"/><text x="40.5954%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191467de (15 samples, 0.03%)</title><rect x="40.3907%" y="181" width="0.0295%" height="15" fill="rgb(218,138,4)" fg:x="20533" fg:w="15"/><text x="40.6407%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819146876 (6 samples, 0.01%)</title><rect x="40.4320%" y="181" width="0.0118%" height="15" fill="rgb(250,191,14)" fg:x="20554" fg:w="6"/><text x="40.6820%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819146983 (32 samples, 0.06%)</title><rect x="40.4556%" y="181" width="0.0629%" height="15" fill="rgb(239,60,40)" fg:x="20566" fg:w="32"/><text x="40.7056%" y="191.50"></text></g><g><title>redirs`&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (131 samples, 0.26%)</title><rect x="40.5421%" y="181" width="0.2577%" height="15" fill="rgb(206,27,48)" fg:x="20610" fg:w="131"/><text x="40.7921%" y="191.50"></text></g><g><title>redirs`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (17 samples, 0.03%)</title><rect x="40.7664%" y="165" width="0.0334%" height="15" fill="rgb(225,35,8)" fg:x="20724" fg:w="17"/><text x="41.0164%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819146983 (9 samples, 0.02%)</title><rect x="41.2365%" y="165" width="0.0177%" height="15" fill="rgb(250,213,24)" fg:x="20963" fg:w="9"/><text x="41.4865%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (33 samples, 0.06%)</title><rect x="41.2542%" y="165" width="0.0649%" height="15" fill="rgb(247,123,22)" fg:x="20972" fg:w="33"/><text x="41.5042%" y="175.50"></text></g><g><title>redirs`&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_insert (279 samples, 0.55%)</title><rect x="40.7998%" y="181" width="0.5488%" height="15" fill="rgb(231,138,38)" fg:x="20741" fg:w="279"/><text x="41.0498%" y="191.50"></text></g><g><title>redirs`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (15 samples, 0.03%)</title><rect x="41.3191%" y="165" width="0.0295%" height="15" fill="rgb(231,145,46)" fg:x="21005" fg:w="15"/><text x="41.5691%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (4,667 samples, 9.18%)</title><rect x="41.4352%" y="165" width="9.1805%" height="15" fill="rgb(251,118,11)" fg:x="21064" fg:w="4667"/><text x="41.6852%" y="175.50">libsystem_ker..</text></g><g><title>redirs`redirs::message::serialise::serialise_message (4,734 samples, 9.31%)</title><rect x="41.3605%" y="181" width="9.3123%" height="15" fill="rgb(217,147,25)" fg:x="21026" fg:w="4734"/><text x="41.6105%" y="191.50">redirs`redirs..</text></g><g><title>redirs`std::net::udp::UdpSocket::send (29 samples, 0.06%)</title><rect x="50.6157%" y="165" width="0.0570%" height="15" fill="rgb(247,81,37)" fg:x="25731" fg:w="29"/><text x="50.8657%" y="175.50"></text></g><g><title>redirs`redirs::command::handle_command (5,356 samples, 10.54%)</title><rect x="40.1389%" y="197" width="10.5358%" height="15" fill="rgb(209,12,38)" fg:x="20405" fg:w="5356"/><text x="40.3889%" y="207.50">redirs`redirs::..</text></g><g><title>libsystem_malloc.dylib`0x7ff8191251fd (6 samples, 0.01%)</title><rect x="50.8478%" y="181" width="0.0118%" height="15" fill="rgb(227,1,9)" fg:x="25849" fg:w="6"/><text x="51.0978%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125207 (27 samples, 0.05%)</title><rect x="50.8675%" y="181" width="0.0531%" height="15" fill="rgb(248,47,43)" fg:x="25859" fg:w="27"/><text x="51.1175%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81912520b (6 samples, 0.01%)</title><rect x="50.9206%" y="181" width="0.0118%" height="15" fill="rgb(221,10,30)" fg:x="25886" fg:w="6"/><text x="51.1706%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125224 (10 samples, 0.02%)</title><rect x="50.9363%" y="181" width="0.0197%" height="15" fill="rgb(210,229,1)" fg:x="25894" fg:w="10"/><text x="51.1863%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191252ee (6 samples, 0.01%)</title><rect x="51.0032%" y="181" width="0.0118%" height="15" fill="rgb(222,148,37)" fg:x="25928" fg:w="6"/><text x="51.2532%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125312 (8 samples, 0.02%)</title><rect x="51.0367%" y="181" width="0.0157%" height="15" fill="rgb(234,67,33)" fg:x="25945" fg:w="8"/><text x="51.2867%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81912532f (32 samples, 0.06%)</title><rect x="51.0622%" y="181" width="0.0629%" height="15" fill="rgb(247,98,35)" fg:x="25958" fg:w="32"/><text x="51.3122%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191467b5 (7 samples, 0.01%)</title><rect x="51.1940%" y="181" width="0.0138%" height="15" fill="rgb(247,138,52)" fg:x="26025" fg:w="7"/><text x="51.4440%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191467de (13 samples, 0.03%)</title><rect x="51.2294%" y="181" width="0.0256%" height="15" fill="rgb(213,79,30)" fg:x="26043" fg:w="13"/><text x="51.4794%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191467e0 (6 samples, 0.01%)</title><rect x="51.2550%" y="181" width="0.0118%" height="15" fill="rgb(246,177,23)" fg:x="26056" fg:w="6"/><text x="51.5050%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819146802 (7 samples, 0.01%)</title><rect x="51.2865%" y="181" width="0.0138%" height="15" fill="rgb(230,62,27)" fg:x="26072" fg:w="7"/><text x="51.5365%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819146843 (39 samples, 0.08%)</title><rect x="51.3239%" y="181" width="0.0767%" height="15" fill="rgb(216,154,8)" fg:x="26091" fg:w="39"/><text x="51.5739%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191468aa (14 samples, 0.03%)</title><rect x="51.4183%" y="181" width="0.0275%" height="15" fill="rgb(244,35,45)" fg:x="26139" fg:w="14"/><text x="51.6683%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (8 samples, 0.02%)</title><rect x="51.4301%" y="165" width="0.0157%" height="15" fill="rgb(251,115,12)" fg:x="26145" fg:w="8"/><text x="51.6801%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819146960 (23 samples, 0.05%)</title><rect x="51.4832%" y="181" width="0.0452%" height="15" fill="rgb(240,54,50)" fg:x="26172" fg:w="23"/><text x="51.7332%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819146983 (81 samples, 0.16%)</title><rect x="51.5383%" y="181" width="0.1593%" height="15" fill="rgb(233,84,52)" fg:x="26200" fg:w="81"/><text x="51.7883%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191469ba (18 samples, 0.04%)</title><rect x="51.7035%" y="181" width="0.0354%" height="15" fill="rgb(207,117,47)" fg:x="26284" fg:w="18"/><text x="51.9535%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819146a0f (9 samples, 0.02%)</title><rect x="51.7429%" y="181" width="0.0177%" height="15" fill="rgb(249,43,39)" fg:x="26304" fg:w="9"/><text x="51.9929%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81914f677 (7 samples, 0.01%)</title><rect x="51.7822%" y="181" width="0.0138%" height="15" fill="rgb(209,38,44)" fg:x="26324" fg:w="7"/><text x="52.0322%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (10 samples, 0.02%)</title><rect x="51.8511%" y="181" width="0.0197%" height="15" fill="rgb(236,212,23)" fg:x="26359" fg:w="10"/><text x="52.1011%" y="191.50"></text></g><g><title>redirs`__rust_alloc (7 samples, 0.01%)</title><rect x="51.8904%" y="181" width="0.0138%" height="15" fill="rgb(242,79,21)" fg:x="26379" fg:w="7"/><text x="52.1404%" y="191.50"></text></g><g><title>redirs`alloc::string::String::from_utf8_lossy (7 samples, 0.01%)</title><rect x="51.9101%" y="181" width="0.0138%" height="15" fill="rgb(211,96,35)" fg:x="26389" fg:w="7"/><text x="52.1601%" y="191.50"></text></g><g><title>redirs`redirs::command::parse_set (9 samples, 0.02%)</title><rect x="51.9297%" y="181" width="0.0177%" height="15" fill="rgb(253,215,40)" fg:x="26399" fg:w="9"/><text x="52.1797%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191251fd (16 samples, 0.03%)</title><rect x="52.0871%" y="165" width="0.0315%" height="15" fill="rgb(211,81,21)" fg:x="26479" fg:w="16"/><text x="52.3371%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125207 (49 samples, 0.10%)</title><rect x="52.1225%" y="165" width="0.0964%" height="15" fill="rgb(208,190,38)" fg:x="26497" fg:w="49"/><text x="52.3725%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81912520b (8 samples, 0.02%)</title><rect x="52.2189%" y="165" width="0.0157%" height="15" fill="rgb(235,213,38)" fg:x="26546" fg:w="8"/><text x="52.4689%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125224 (13 samples, 0.03%)</title><rect x="52.2425%" y="165" width="0.0256%" height="15" fill="rgb(237,122,38)" fg:x="26558" fg:w="13"/><text x="52.4925%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81912523a (13 samples, 0.03%)</title><rect x="52.2720%" y="165" width="0.0256%" height="15" fill="rgb(244,218,35)" fg:x="26573" fg:w="13"/><text x="52.5220%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191252ee (7 samples, 0.01%)</title><rect x="52.3546%" y="165" width="0.0138%" height="15" fill="rgb(240,68,47)" fg:x="26615" fg:w="7"/><text x="52.6046%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125312 (38 samples, 0.07%)</title><rect x="52.3959%" y="165" width="0.0748%" height="15" fill="rgb(210,16,53)" fg:x="26636" fg:w="38"/><text x="52.6459%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125324 (6 samples, 0.01%)</title><rect x="52.4825%" y="165" width="0.0118%" height="15" fill="rgb(235,124,12)" fg:x="26680" fg:w="6"/><text x="52.7325%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81912532f (45 samples, 0.09%)</title><rect x="52.4943%" y="165" width="0.0885%" height="15" fill="rgb(224,169,11)" fg:x="26686" fg:w="45"/><text x="52.7443%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191253e0 (6 samples, 0.01%)</title><rect x="52.5907%" y="165" width="0.0118%" height="15" fill="rgb(250,166,2)" fg:x="26735" fg:w="6"/><text x="52.8407%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125c2d (7 samples, 0.01%)</title><rect x="52.6045%" y="165" width="0.0138%" height="15" fill="rgb(242,216,29)" fg:x="26742" fg:w="7"/><text x="52.8545%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191466a1 (7 samples, 0.01%)</title><rect x="52.6222%" y="165" width="0.0138%" height="15" fill="rgb(230,116,27)" fg:x="26751" fg:w="7"/><text x="52.8722%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819146843 (16 samples, 0.03%)</title><rect x="52.7185%" y="165" width="0.0315%" height="15" fill="rgb(228,99,48)" fg:x="26800" fg:w="16"/><text x="52.9685%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819146873 (8 samples, 0.02%)</title><rect x="52.7500%" y="165" width="0.0157%" height="15" fill="rgb(253,11,6)" fg:x="26816" fg:w="8"/><text x="53.0000%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191468aa (15 samples, 0.03%)</title><rect x="52.7736%" y="165" width="0.0295%" height="15" fill="rgb(247,143,39)" fg:x="26828" fg:w="15"/><text x="53.0236%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (13 samples, 0.03%)</title><rect x="52.7776%" y="149" width="0.0256%" height="15" fill="rgb(236,97,10)" fg:x="26830" fg:w="13"/><text x="53.0276%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819146960 (9 samples, 0.02%)</title><rect x="52.8425%" y="165" width="0.0177%" height="15" fill="rgb(233,208,19)" fg:x="26863" fg:w="9"/><text x="53.0925%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819146983 (58 samples, 0.11%)</title><rect x="52.8739%" y="165" width="0.1141%" height="15" fill="rgb(216,164,2)" fg:x="26879" fg:w="58"/><text x="53.1239%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191469ba (7 samples, 0.01%)</title><rect x="52.9979%" y="165" width="0.0138%" height="15" fill="rgb(220,129,5)" fg:x="26942" fg:w="7"/><text x="53.2479%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191500e1 (9 samples, 0.02%)</title><rect x="53.0293%" y="165" width="0.0177%" height="15" fill="rgb(242,17,10)" fg:x="26958" fg:w="9"/><text x="53.2793%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191500eb (7 samples, 0.01%)</title><rect x="53.0471%" y="165" width="0.0138%" height="15" fill="rgb(242,107,0)" fg:x="26967" fg:w="7"/><text x="53.2971%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819150105 (7 samples, 0.01%)</title><rect x="53.0785%" y="165" width="0.0138%" height="15" fill="rgb(251,28,31)" fg:x="26983" fg:w="7"/><text x="53.3285%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (25 samples, 0.05%)</title><rect x="53.1159%" y="165" width="0.0492%" height="15" fill="rgb(233,223,10)" fg:x="27002" fg:w="25"/><text x="53.3659%" y="175.50"></text></g><g><title>redirs`&lt;core::str::lossy::Utf8Chunks as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.01%)</title><rect x="53.1651%" y="165" width="0.0138%" height="15" fill="rgb(215,21,27)" fg:x="27027" fg:w="7"/><text x="53.4151%" y="175.50"></text></g><g><title>redirs`__rdl_dealloc (9 samples, 0.02%)</title><rect x="53.1867%" y="165" width="0.0177%" height="15" fill="rgb(232,23,21)" fg:x="27038" fg:w="9"/><text x="53.4367%" y="175.50"></text></g><g><title>redirs`alloc::string::String::from_utf8_lossy (312 samples, 0.61%)</title><rect x="53.2202%" y="165" width="0.6137%" height="15" fill="rgb(244,5,23)" fg:x="27055" fg:w="312"/><text x="53.4702%" y="175.50"></text></g><g><title>redirs`&lt;core::str::lossy::Utf8Chunks as core::iter::traits::iterator::Iterator&gt;::next (278 samples, 0.55%)</title><rect x="53.2870%" y="149" width="0.5469%" height="15" fill="rgb(226,81,46)" fg:x="27089" fg:w="278"/><text x="53.5370%" y="159.50"></text></g><g><title>redirs`core::fmt::num::imp::_&lt;impl core::fmt::Display for u64&gt;::fmt (6 samples, 0.01%)</title><rect x="53.8339%" y="165" width="0.0118%" height="15" fill="rgb(247,70,30)" fg:x="27367" fg:w="6"/><text x="54.0839%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125c2d (9 samples, 0.02%)</title><rect x="54.0463%" y="149" width="0.0177%" height="15" fill="rgb(212,68,19)" fg:x="27475" fg:w="9"/><text x="54.2963%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191467b5 (15 samples, 0.03%)</title><rect x="54.1211%" y="149" width="0.0295%" height="15" fill="rgb(240,187,13)" fg:x="27513" fg:w="15"/><text x="54.3711%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191467de (9 samples, 0.02%)</title><rect x="54.1604%" y="149" width="0.0177%" height="15" fill="rgb(223,113,26)" fg:x="27533" fg:w="9"/><text x="54.4104%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819146822 (14 samples, 0.03%)</title><rect x="54.1978%" y="149" width="0.0275%" height="15" fill="rgb(206,192,2)" fg:x="27552" fg:w="14"/><text x="54.4478%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819146824 (6 samples, 0.01%)</title><rect x="54.2254%" y="149" width="0.0118%" height="15" fill="rgb(241,108,4)" fg:x="27566" fg:w="6"/><text x="54.4754%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819146843 (20 samples, 0.04%)</title><rect x="54.2411%" y="149" width="0.0393%" height="15" fill="rgb(247,173,49)" fg:x="27574" fg:w="20"/><text x="54.4911%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819146960 (11 samples, 0.02%)</title><rect x="54.3414%" y="149" width="0.0216%" height="15" fill="rgb(224,114,35)" fg:x="27625" fg:w="11"/><text x="54.5914%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819146983 (43 samples, 0.08%)</title><rect x="54.3709%" y="149" width="0.0846%" height="15" fill="rgb(245,159,27)" fg:x="27640" fg:w="43"/><text x="54.6209%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191469ba (13 samples, 0.03%)</title><rect x="54.4555%" y="149" width="0.0256%" height="15" fill="rgb(245,172,44)" fg:x="27683" fg:w="13"/><text x="54.7055%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191500eb (8 samples, 0.02%)</title><rect x="54.5027%" y="149" width="0.0157%" height="15" fill="rgb(236,23,11)" fg:x="27707" fg:w="8"/><text x="54.7527%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819150105 (23 samples, 0.05%)</title><rect x="54.5460%" y="149" width="0.0452%" height="15" fill="rgb(205,117,38)" fg:x="27729" fg:w="23"/><text x="54.7960%" y="159.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (11 samples, 0.02%)</title><rect x="54.6011%" y="149" width="0.0216%" height="15" fill="rgb(237,72,25)" fg:x="27757" fg:w="11"/><text x="54.8511%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (34 samples, 0.07%)</title><rect x="54.6227%" y="149" width="0.0669%" height="15" fill="rgb(244,70,9)" fg:x="27768" fg:w="34"/><text x="54.8727%" y="159.50"></text></g><g><title>redirs`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (7 samples, 0.01%)</title><rect x="54.6896%" y="149" width="0.0138%" height="15" fill="rgb(217,125,39)" fg:x="27802" fg:w="7"/><text x="54.9396%" y="159.50"></text></g><g><title>redirs`DYLD-STUB$$memcpy (17 samples, 0.03%)</title><rect x="54.7053%" y="149" width="0.0334%" height="15" fill="rgb(235,36,10)" fg:x="27810" fg:w="17"/><text x="54.9553%" y="159.50"></text></g><g><title>redirs`__rdl_dealloc (13 samples, 0.03%)</title><rect x="54.7388%" y="149" width="0.0256%" height="15" fill="rgb(251,123,47)" fg:x="27827" fg:w="13"/><text x="54.9888%" y="159.50"></text></g><g><title>redirs`__rust_dealloc (15 samples, 0.03%)</title><rect x="54.7643%" y="149" width="0.0295%" height="15" fill="rgb(221,13,13)" fg:x="27840" fg:w="15"/><text x="55.0143%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125170 (6 samples, 0.01%)</title><rect x="54.8961%" y="133" width="0.0118%" height="15" fill="rgb(238,131,9)" fg:x="27907" fg:w="6"/><text x="55.1461%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81914f64a (6 samples, 0.01%)</title><rect x="54.9276%" y="133" width="0.0118%" height="15" fill="rgb(211,50,8)" fg:x="27923" fg:w="6"/><text x="55.1776%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81914f679 (7 samples, 0.01%)</title><rect x="54.9689%" y="133" width="0.0138%" height="15" fill="rgb(245,182,24)" fg:x="27944" fg:w="7"/><text x="55.2189%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191251fd (17 samples, 0.03%)</title><rect x="55.0673%" y="117" width="0.0334%" height="15" fill="rgb(242,14,37)" fg:x="27994" fg:w="17"/><text x="55.3173%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125207 (51 samples, 0.10%)</title><rect x="55.1066%" y="117" width="0.1003%" height="15" fill="rgb(246,228,12)" fg:x="28014" fg:w="51"/><text x="55.3566%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81912520b (6 samples, 0.01%)</title><rect x="55.2069%" y="117" width="0.0118%" height="15" fill="rgb(213,55,15)" fg:x="28065" fg:w="6"/><text x="55.4569%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125224 (26 samples, 0.05%)</title><rect x="55.2246%" y="117" width="0.0511%" height="15" fill="rgb(209,9,3)" fg:x="28074" fg:w="26"/><text x="55.4746%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81912523a (50 samples, 0.10%)</title><rect x="55.2837%" y="117" width="0.0984%" height="15" fill="rgb(230,59,30)" fg:x="28104" fg:w="50"/><text x="55.5337%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81912523d (15 samples, 0.03%)</title><rect x="55.3820%" y="117" width="0.0295%" height="15" fill="rgb(209,121,21)" fg:x="28154" fg:w="15"/><text x="55.6320%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191252ee (20 samples, 0.04%)</title><rect x="55.4686%" y="117" width="0.0393%" height="15" fill="rgb(220,109,13)" fg:x="28198" fg:w="20"/><text x="55.7186%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191252f0 (13 samples, 0.03%)</title><rect x="55.5079%" y="117" width="0.0256%" height="15" fill="rgb(232,18,1)" fg:x="28218" fg:w="13"/><text x="55.7579%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125312 (29 samples, 0.06%)</title><rect x="55.5512%" y="117" width="0.0570%" height="15" fill="rgb(215,41,42)" fg:x="28240" fg:w="29"/><text x="55.8012%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81912532f (45 samples, 0.09%)</title><rect x="55.6358%" y="117" width="0.0885%" height="15" fill="rgb(224,123,36)" fg:x="28283" fg:w="45"/><text x="55.8858%" y="127.50"></text></g><g><title>redirs`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (481 samples, 0.95%)</title><rect x="54.7938%" y="149" width="0.9462%" height="15" fill="rgb(240,125,3)" fg:x="27855" fg:w="481"/><text x="55.0438%" y="159.50"></text></g><g><title>redirs`alloc::raw_vec::finish_grow (373 samples, 0.73%)</title><rect x="55.0063%" y="133" width="0.7337%" height="15" fill="rgb(205,98,50)" fg:x="27963" fg:w="373"/><text x="55.2563%" y="143.50"></text></g><g><title>redirs`core::fmt::Formatter::pad_integral (9 samples, 0.02%)</title><rect x="55.7420%" y="149" width="0.0177%" height="15" fill="rgb(205,185,37)" fg:x="28337" fg:w="9"/><text x="55.9920%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (7 samples, 0.01%)</title><rect x="55.9112%" y="117" width="0.0138%" height="15" fill="rgb(238,207,15)" fg:x="28423" fg:w="7"/><text x="56.1612%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81914f677 (7 samples, 0.01%)</title><rect x="56.0390%" y="101" width="0.0138%" height="15" fill="rgb(213,199,42)" fg:x="28488" fg:w="7"/><text x="56.2890%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191251fd (10 samples, 0.02%)</title><rect x="56.1315%" y="85" width="0.0197%" height="15" fill="rgb(235,201,11)" fg:x="28535" fg:w="10"/><text x="56.3815%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125207 (40 samples, 0.08%)</title><rect x="56.1551%" y="85" width="0.0787%" height="15" fill="rgb(207,46,11)" fg:x="28547" fg:w="40"/><text x="56.4051%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125224 (17 samples, 0.03%)</title><rect x="56.2456%" y="85" width="0.0334%" height="15" fill="rgb(241,35,35)" fg:x="28593" fg:w="17"/><text x="56.4956%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81912523a (6 samples, 0.01%)</title><rect x="56.3007%" y="85" width="0.0118%" height="15" fill="rgb(243,32,47)" fg:x="28621" fg:w="6"/><text x="56.5507%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81912525b (8 samples, 0.02%)</title><rect x="56.3164%" y="85" width="0.0157%" height="15" fill="rgb(247,202,23)" fg:x="28629" fg:w="8"/><text x="56.5664%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191252ee (9 samples, 0.02%)</title><rect x="56.3793%" y="85" width="0.0177%" height="15" fill="rgb(219,102,11)" fg:x="28661" fg:w="9"/><text x="56.6293%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191252f0 (7 samples, 0.01%)</title><rect x="56.3970%" y="85" width="0.0138%" height="15" fill="rgb(243,110,44)" fg:x="28670" fg:w="7"/><text x="56.6470%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125312 (26 samples, 0.05%)</title><rect x="56.4226%" y="85" width="0.0511%" height="15" fill="rgb(222,74,54)" fg:x="28683" fg:w="26"/><text x="56.6726%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81912532f (30 samples, 0.06%)</title><rect x="56.4836%" y="85" width="0.0590%" height="15" fill="rgb(216,99,12)" fg:x="28714" fg:w="30"/><text x="56.7336%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191253e0 (8 samples, 0.02%)</title><rect x="56.5505%" y="85" width="0.0157%" height="15" fill="rgb(226,22,26)" fg:x="28748" fg:w="8"/><text x="56.8005%" y="95.50"></text></g><g><title>redirs`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (327 samples, 0.64%)</title><rect x="55.9249%" y="117" width="0.6432%" height="15" fill="rgb(217,163,10)" fg:x="28430" fg:w="327"/><text x="56.1749%" y="127.50"></text></g><g><title>redirs`alloc::raw_vec::finish_grow (245 samples, 0.48%)</title><rect x="56.0862%" y="101" width="0.4819%" height="15" fill="rgb(213,25,53)" fg:x="28512" fg:w="245"/><text x="56.3362%" y="111.50"></text></g><g><title>redirs`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (376 samples, 0.74%)</title><rect x="55.8325%" y="133" width="0.7396%" height="15" fill="rgb(252,105,26)" fg:x="28383" fg:w="376"/><text x="56.0825%" y="143.50"></text></g><g><title>redirs`core::fmt::Formatter::pad_integral (22 samples, 0.04%)</title><rect x="56.5819%" y="133" width="0.0433%" height="15" fill="rgb(220,39,43)" fg:x="28764" fg:w="22"/><text x="56.8319%" y="143.50"></text></g><g><title>redirs`core::fmt::num::imp::_&lt;impl core::fmt::Display for u64&gt;::fmt (471 samples, 0.93%)</title><rect x="55.7597%" y="149" width="0.9265%" height="15" fill="rgb(229,68,48)" fg:x="28346" fg:w="471"/><text x="56.0097%" y="159.50"></text></g><g><title>redirs`core::fmt::Formatter::pad_integral (28 samples, 0.06%)</title><rect x="56.6311%" y="133" width="0.0551%" height="15" fill="rgb(252,8,32)" fg:x="28789" fg:w="28"/><text x="56.8811%" y="143.50"></text></g><g><title>redirs`core::fmt::Formatter::pad_integral::write_prefix (28 samples, 0.06%)</title><rect x="56.6311%" y="117" width="0.0551%" height="15" fill="rgb(223,20,43)" fg:x="28789" fg:w="28"/><text x="56.8811%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191466b6 (10 samples, 0.02%)</title><rect x="57.2095%" y="133" width="0.0197%" height="15" fill="rgb(229,81,49)" fg:x="29083" fg:w="10"/><text x="57.4595%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191467aa (6 samples, 0.01%)</title><rect x="57.2763%" y="133" width="0.0118%" height="15" fill="rgb(236,28,36)" fg:x="29117" fg:w="6"/><text x="57.5263%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191467b5 (13 samples, 0.03%)</title><rect x="57.2881%" y="133" width="0.0256%" height="15" fill="rgb(249,185,26)" fg:x="29123" fg:w="13"/><text x="57.5381%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191467de (11 samples, 0.02%)</title><rect x="57.3255%" y="133" width="0.0216%" height="15" fill="rgb(249,174,33)" fg:x="29142" fg:w="11"/><text x="57.5755%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191467ee (7 samples, 0.01%)</title><rect x="57.3629%" y="133" width="0.0138%" height="15" fill="rgb(233,201,37)" fg:x="29161" fg:w="7"/><text x="57.6129%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819146843 (81 samples, 0.16%)</title><rect x="57.4376%" y="133" width="0.1593%" height="15" fill="rgb(221,78,26)" fg:x="29199" fg:w="81"/><text x="57.6876%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819146873 (16 samples, 0.03%)</title><rect x="57.5970%" y="133" width="0.0315%" height="15" fill="rgb(250,127,30)" fg:x="29280" fg:w="16"/><text x="57.8470%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819146895 (6 samples, 0.01%)</title><rect x="57.6383%" y="133" width="0.0118%" height="15" fill="rgb(230,49,44)" fg:x="29301" fg:w="6"/><text x="57.8883%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191468ca (6 samples, 0.01%)</title><rect x="57.6599%" y="133" width="0.0118%" height="15" fill="rgb(229,67,23)" fg:x="29312" fg:w="6"/><text x="57.9099%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819146960 (26 samples, 0.05%)</title><rect x="57.6953%" y="133" width="0.0511%" height="15" fill="rgb(249,83,47)" fg:x="29330" fg:w="26"/><text x="57.9453%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819146983 (136 samples, 0.27%)</title><rect x="57.7661%" y="133" width="0.2675%" height="15" fill="rgb(215,43,3)" fg:x="29366" fg:w="136"/><text x="58.0161%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191469ba (33 samples, 0.06%)</title><rect x="58.0337%" y="133" width="0.0649%" height="15" fill="rgb(238,154,13)" fg:x="29502" fg:w="33"/><text x="58.2837%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819146a0f (7 samples, 0.01%)</title><rect x="58.1025%" y="133" width="0.0138%" height="15" fill="rgb(219,56,2)" fg:x="29537" fg:w="7"/><text x="58.3525%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (54 samples, 0.11%)</title><rect x="58.1163%" y="133" width="0.1062%" height="15" fill="rgb(233,0,4)" fg:x="29544" fg:w="54"/><text x="58.3663%" y="143.50"></text></g><g><title>redirs`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (10 samples, 0.02%)</title><rect x="58.2225%" y="133" width="0.0197%" height="15" fill="rgb(235,30,7)" fg:x="29598" fg:w="10"/><text x="58.4725%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819126e9d (19 samples, 0.04%)</title><rect x="58.4389%" y="117" width="0.0374%" height="15" fill="rgb(250,79,13)" fg:x="29708" fg:w="19"/><text x="58.6889%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819150131 (17 samples, 0.03%)</title><rect x="58.4861%" y="117" width="0.0334%" height="15" fill="rgb(211,146,34)" fg:x="29732" fg:w="17"/><text x="58.7361%" y="127.50"></text></g><g><title>redirs`DYLD-STUB$$realloc (17 samples, 0.03%)</title><rect x="58.5196%" y="117" width="0.0334%" height="15" fill="rgb(228,22,38)" fg:x="29749" fg:w="17"/><text x="58.7696%" y="127.50"></text></g><g><title>redirs`__rdl_realloc (13 samples, 0.03%)</title><rect x="58.5530%" y="117" width="0.0256%" height="15" fill="rgb(235,168,5)" fg:x="29766" fg:w="13"/><text x="58.8030%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125c37 (22 samples, 0.04%)</title><rect x="58.7123%" y="101" width="0.0433%" height="15" fill="rgb(221,155,16)" fg:x="29847" fg:w="22"/><text x="58.9623%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125c6f (11 samples, 0.02%)</title><rect x="58.7595%" y="101" width="0.0216%" height="15" fill="rgb(215,215,53)" fg:x="29871" fg:w="11"/><text x="59.0095%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125d0d (9 samples, 0.02%)</title><rect x="58.7851%" y="101" width="0.0177%" height="15" fill="rgb(223,4,10)" fg:x="29884" fg:w="9"/><text x="59.0351%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125d2d (21 samples, 0.04%)</title><rect x="58.8225%" y="101" width="0.0413%" height="15" fill="rgb(234,103,6)" fg:x="29903" fg:w="21"/><text x="59.0725%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125d51 (9 samples, 0.02%)</title><rect x="58.8795%" y="101" width="0.0177%" height="15" fill="rgb(227,97,0)" fg:x="29932" fg:w="9"/><text x="59.1295%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125d53 (6 samples, 0.01%)</title><rect x="58.8972%" y="101" width="0.0118%" height="15" fill="rgb(234,150,53)" fg:x="29941" fg:w="6"/><text x="59.1472%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125d59 (9 samples, 0.02%)</title><rect x="58.9090%" y="101" width="0.0177%" height="15" fill="rgb(228,201,54)" fg:x="29947" fg:w="9"/><text x="59.1590%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125d61 (12 samples, 0.02%)</title><rect x="58.9267%" y="101" width="0.0236%" height="15" fill="rgb(222,22,37)" fg:x="29956" fg:w="12"/><text x="59.1767%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125d6d (6 samples, 0.01%)</title><rect x="58.9602%" y="101" width="0.0118%" height="15" fill="rgb(237,53,32)" fg:x="29973" fg:w="6"/><text x="59.2102%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125db2 (105 samples, 0.21%)</title><rect x="59.0133%" y="101" width="0.2065%" height="15" fill="rgb(233,25,53)" fg:x="30000" fg:w="105"/><text x="59.2633%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125dc5 (21 samples, 0.04%)</title><rect x="59.2198%" y="101" width="0.0413%" height="15" fill="rgb(210,40,34)" fg:x="30105" fg:w="21"/><text x="59.4698%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81914fb37 (14 samples, 0.03%)</title><rect x="59.2631%" y="101" width="0.0275%" height="15" fill="rgb(241,220,44)" fg:x="30127" fg:w="14"/><text x="59.5131%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81914fbdf (6 samples, 0.01%)</title><rect x="59.2907%" y="101" width="0.0118%" height="15" fill="rgb(235,28,35)" fg:x="30141" fg:w="6"/><text x="59.5407%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819150136 (7 samples, 0.01%)</title><rect x="59.3025%" y="101" width="0.0138%" height="15" fill="rgb(210,56,17)" fg:x="30147" fg:w="7"/><text x="59.5525%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819150138 (6 samples, 0.01%)</title><rect x="59.3162%" y="101" width="0.0118%" height="15" fill="rgb(224,130,29)" fg:x="30154" fg:w="6"/><text x="59.5662%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81915013a (6 samples, 0.01%)</title><rect x="59.3280%" y="101" width="0.0118%" height="15" fill="rgb(235,212,8)" fg:x="30160" fg:w="6"/><text x="59.5780%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81915014e (7 samples, 0.01%)</title><rect x="59.3418%" y="101" width="0.0138%" height="15" fill="rgb(223,33,50)" fg:x="30167" fg:w="7"/><text x="59.5918%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819150155 (6 samples, 0.01%)</title><rect x="59.3556%" y="101" width="0.0118%" height="15" fill="rgb(219,149,13)" fg:x="30174" fg:w="6"/><text x="59.6056%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191501d0 (6 samples, 0.01%)</title><rect x="59.3811%" y="101" width="0.0118%" height="15" fill="rgb(250,156,29)" fg:x="30187" fg:w="6"/><text x="59.6311%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191501e0 (6 samples, 0.01%)</title><rect x="59.4028%" y="101" width="0.0118%" height="15" fill="rgb(216,193,19)" fg:x="30198" fg:w="6"/><text x="59.6528%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819150257 (14 samples, 0.03%)</title><rect x="59.4382%" y="101" width="0.0275%" height="15" fill="rgb(216,135,14)" fg:x="30216" fg:w="14"/><text x="59.6882%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819150263 (7 samples, 0.01%)</title><rect x="59.4716%" y="101" width="0.0138%" height="15" fill="rgb(241,47,5)" fg:x="30233" fg:w="7"/><text x="59.7216%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819128352 (8 samples, 0.02%)</title><rect x="59.4933%" y="85" width="0.0157%" height="15" fill="rgb(233,42,35)" fg:x="30244" fg:w="8"/><text x="59.7433%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819128359 (12 samples, 0.02%)</title><rect x="59.5090%" y="85" width="0.0236%" height="15" fill="rgb(231,13,6)" fg:x="30252" fg:w="12"/><text x="59.7590%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81912836c (7 samples, 0.01%)</title><rect x="59.5405%" y="85" width="0.0138%" height="15" fill="rgb(207,181,40)" fg:x="30268" fg:w="7"/><text x="59.7905%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81914fb3d (6 samples, 0.01%)</title><rect x="59.5602%" y="85" width="0.0118%" height="15" fill="rgb(254,173,49)" fg:x="30278" fg:w="6"/><text x="59.8102%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81914fb44 (8 samples, 0.02%)</title><rect x="59.5720%" y="85" width="0.0157%" height="15" fill="rgb(221,1,38)" fg:x="30284" fg:w="8"/><text x="59.8220%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81914fb57 (78 samples, 0.15%)</title><rect x="59.6034%" y="85" width="0.1534%" height="15" fill="rgb(206,124,46)" fg:x="30300" fg:w="78"/><text x="59.8534%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81914fb5a (12 samples, 0.02%)</title><rect x="59.7569%" y="85" width="0.0236%" height="15" fill="rgb(249,21,11)" fg:x="30378" fg:w="12"/><text x="60.0069%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81914fb9b (7 samples, 0.01%)</title><rect x="59.8139%" y="85" width="0.0138%" height="15" fill="rgb(222,201,40)" fg:x="30407" fg:w="7"/><text x="60.0639%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191251ae (7 samples, 0.01%)</title><rect x="59.8296%" y="69" width="0.0138%" height="15" fill="rgb(235,61,29)" fg:x="30415" fg:w="7"/><text x="60.0796%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125de7 (22 samples, 0.04%)</title><rect x="59.8513%" y="69" width="0.0433%" height="15" fill="rgb(219,207,3)" fg:x="30426" fg:w="22"/><text x="60.1013%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125e06 (9 samples, 0.02%)</title><rect x="59.8965%" y="69" width="0.0177%" height="15" fill="rgb(222,56,46)" fg:x="30449" fg:w="9"/><text x="60.1465%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125e0a (10 samples, 0.02%)</title><rect x="59.9142%" y="69" width="0.0197%" height="15" fill="rgb(239,76,54)" fg:x="30458" fg:w="10"/><text x="60.1642%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125e11 (6 samples, 0.01%)</title><rect x="59.9339%" y="69" width="0.0118%" height="15" fill="rgb(231,124,27)" fg:x="30468" fg:w="6"/><text x="60.1839%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125eb6 (6 samples, 0.01%)</title><rect x="59.9575%" y="69" width="0.0118%" height="15" fill="rgb(249,195,6)" fg:x="30480" fg:w="6"/><text x="60.2075%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125ed5 (17 samples, 0.03%)</title><rect x="59.9890%" y="69" width="0.0334%" height="15" fill="rgb(237,174,47)" fg:x="30496" fg:w="17"/><text x="60.2390%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125efe (16 samples, 0.03%)</title><rect x="60.0421%" y="69" width="0.0315%" height="15" fill="rgb(206,201,31)" fg:x="30523" fg:w="16"/><text x="60.2921%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125f13 (7 samples, 0.01%)</title><rect x="60.0932%" y="69" width="0.0138%" height="15" fill="rgb(231,57,52)" fg:x="30549" fg:w="7"/><text x="60.3432%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125f29 (8 samples, 0.02%)</title><rect x="60.1090%" y="69" width="0.0157%" height="15" fill="rgb(248,177,22)" fg:x="30557" fg:w="8"/><text x="60.3590%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125f45 (7 samples, 0.01%)</title><rect x="60.1267%" y="69" width="0.0138%" height="15" fill="rgb(215,211,37)" fg:x="30566" fg:w="7"/><text x="60.3767%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125f6b (7 samples, 0.01%)</title><rect x="60.1542%" y="69" width="0.0138%" height="15" fill="rgb(241,128,51)" fg:x="30580" fg:w="7"/><text x="60.4042%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125f80 (76 samples, 0.15%)</title><rect x="60.1857%" y="69" width="0.1495%" height="15" fill="rgb(227,165,31)" fg:x="30596" fg:w="76"/><text x="60.4357%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125f89 (20 samples, 0.04%)</title><rect x="60.3352%" y="69" width="0.0393%" height="15" fill="rgb(228,167,24)" fg:x="30672" fg:w="20"/><text x="60.5852%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819128401 (9 samples, 0.02%)</title><rect x="60.4375%" y="69" width="0.0177%" height="15" fill="rgb(228,143,12)" fg:x="30724" fg:w="9"/><text x="60.6875%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191251fd (30 samples, 0.06%)</title><rect x="60.5004%" y="53" width="0.0590%" height="15" fill="rgb(249,149,8)" fg:x="30756" fg:w="30"/><text x="60.7504%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125203 (7 samples, 0.01%)</title><rect x="60.5594%" y="53" width="0.0138%" height="15" fill="rgb(243,35,44)" fg:x="30786" fg:w="7"/><text x="60.8094%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125207 (81 samples, 0.16%)</title><rect x="60.5732%" y="53" width="0.1593%" height="15" fill="rgb(246,89,9)" fg:x="30793" fg:w="81"/><text x="60.8232%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81912520b (21 samples, 0.04%)</title><rect x="60.7326%" y="53" width="0.0413%" height="15" fill="rgb(233,213,13)" fg:x="30874" fg:w="21"/><text x="60.9826%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125224 (39 samples, 0.08%)</title><rect x="60.7876%" y="53" width="0.0767%" height="15" fill="rgb(233,141,41)" fg:x="30902" fg:w="39"/><text x="61.0376%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125229 (6 samples, 0.01%)</title><rect x="60.8663%" y="53" width="0.0118%" height="15" fill="rgb(239,167,4)" fg:x="30942" fg:w="6"/><text x="61.1163%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125233 (6 samples, 0.01%)</title><rect x="60.8801%" y="53" width="0.0118%" height="15" fill="rgb(209,217,16)" fg:x="30949" fg:w="6"/><text x="61.1301%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81912523a (54 samples, 0.11%)</title><rect x="60.8958%" y="53" width="0.1062%" height="15" fill="rgb(219,88,35)" fg:x="30957" fg:w="54"/><text x="61.1458%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125262 (7 samples, 0.01%)</title><rect x="61.0197%" y="53" width="0.0138%" height="15" fill="rgb(220,193,23)" fg:x="31020" fg:w="7"/><text x="61.2697%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191252bc (6 samples, 0.01%)</title><rect x="61.0650%" y="53" width="0.0118%" height="15" fill="rgb(230,90,52)" fg:x="31043" fg:w="6"/><text x="61.3150%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191252ee (58 samples, 0.11%)</title><rect x="61.1004%" y="53" width="0.1141%" height="15" fill="rgb(252,106,19)" fg:x="31061" fg:w="58"/><text x="61.3504%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191252f0 (10 samples, 0.02%)</title><rect x="61.2145%" y="53" width="0.0197%" height="15" fill="rgb(206,74,20)" fg:x="31119" fg:w="10"/><text x="61.4645%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125302 (6 samples, 0.01%)</title><rect x="61.2440%" y="53" width="0.0118%" height="15" fill="rgb(230,138,44)" fg:x="31134" fg:w="6"/><text x="61.4940%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125312 (45 samples, 0.09%)</title><rect x="61.2656%" y="53" width="0.0885%" height="15" fill="rgb(235,182,43)" fg:x="31145" fg:w="45"/><text x="61.5156%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81912532f (59 samples, 0.12%)</title><rect x="61.3778%" y="53" width="0.1161%" height="15" fill="rgb(242,16,51)" fg:x="31202" fg:w="59"/><text x="61.6278%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191253ff (6 samples, 0.01%)</title><rect x="61.5194%" y="53" width="0.0118%" height="15" fill="rgb(248,9,4)" fg:x="31274" fg:w="6"/><text x="61.7694%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81912846b (551 samples, 1.08%)</title><rect x="60.4650%" y="69" width="1.0839%" height="15" fill="rgb(210,31,22)" fg:x="30738" fg:w="551"/><text x="60.7150%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125407 (9 samples, 0.02%)</title><rect x="61.5312%" y="53" width="0.0177%" height="15" fill="rgb(239,54,39)" fg:x="31280" fg:w="9"/><text x="61.7812%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819128488 (54 samples, 0.11%)</title><rect x="61.5568%" y="69" width="0.1062%" height="15" fill="rgb(230,99,41)" fg:x="31293" fg:w="54"/><text x="61.8068%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (54 samples, 0.11%)</title><rect x="61.5568%" y="53" width="0.1062%" height="15" fill="rgb(253,106,12)" fg:x="31293" fg:w="54"/><text x="61.8068%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819146843 (28 samples, 0.06%)</title><rect x="61.7850%" y="53" width="0.0551%" height="15" fill="rgb(213,46,41)" fg:x="31409" fg:w="28"/><text x="62.0350%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191468aa (7 samples, 0.01%)</title><rect x="61.8597%" y="53" width="0.0138%" height="15" fill="rgb(215,133,35)" fg:x="31447" fg:w="7"/><text x="62.1097%" y="63.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (6 samples, 0.01%)</title><rect x="61.8617%" y="37" width="0.0118%" height="15" fill="rgb(213,28,5)" fg:x="31448" fg:w="6"/><text x="62.1117%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81914694d (45 samples, 0.09%)</title><rect x="61.9305%" y="53" width="0.0885%" height="15" fill="rgb(215,77,49)" fg:x="31483" fg:w="45"/><text x="62.1805%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819146983 (32 samples, 0.06%)</title><rect x="62.0308%" y="53" width="0.0629%" height="15" fill="rgb(248,100,22)" fg:x="31534" fg:w="32"/><text x="62.2808%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81914698c (17 samples, 0.03%)</title><rect x="62.0938%" y="53" width="0.0334%" height="15" fill="rgb(208,67,9)" fg:x="31566" fg:w="17"/><text x="62.3438%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191469ba (6 samples, 0.01%)</title><rect x="62.1272%" y="53" width="0.0118%" height="15" fill="rgb(219,133,21)" fg:x="31583" fg:w="6"/><text x="62.3772%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819128495 (267 samples, 0.53%)</title><rect x="61.6630%" y="69" width="0.5252%" height="15" fill="rgb(246,46,29)" fg:x="31347" fg:w="267"/><text x="61.9130%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (13 samples, 0.03%)</title><rect x="62.1626%" y="53" width="0.0256%" height="15" fill="rgb(246,185,52)" fg:x="31601" fg:w="13"/><text x="62.4126%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191284a4 (7 samples, 0.01%)</title><rect x="62.2099%" y="69" width="0.0138%" height="15" fill="rgb(252,136,11)" fg:x="31625" fg:w="7"/><text x="62.4599%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191466a0 (16 samples, 0.03%)</title><rect x="62.2394%" y="69" width="0.0315%" height="15" fill="rgb(219,138,53)" fg:x="31640" fg:w="16"/><text x="62.4894%" y="79.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (12 samples, 0.02%)</title><rect x="62.2748%" y="69" width="0.0236%" height="15" fill="rgb(211,51,23)" fg:x="31658" fg:w="12"/><text x="62.5248%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81914fb9f (1,265 samples, 2.49%)</title><rect x="59.8277%" y="85" width="2.4884%" height="15" fill="rgb(247,221,28)" fg:x="30414" fg:w="1265"/><text x="60.0777%" y="95.50">li..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (9 samples, 0.02%)</title><rect x="62.2984%" y="69" width="0.0177%" height="15" fill="rgb(251,222,45)" fg:x="31670" fg:w="9"/><text x="62.5484%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81914fba9 (7 samples, 0.01%)</title><rect x="62.3180%" y="85" width="0.0138%" height="15" fill="rgb(217,162,53)" fg:x="31680" fg:w="7"/><text x="62.5680%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81915026b (1,466 samples, 2.88%)</title><rect x="59.4854%" y="101" width="2.8838%" height="15" fill="rgb(229,93,14)" fg:x="30240" fg:w="1466"/><text x="59.7354%" y="111.50">li..</text></g><g><title>libsystem_malloc.dylib`0x7ff8191502c0 (8 samples, 0.02%)</title><rect x="62.4046%" y="101" width="0.0157%" height="15" fill="rgb(209,67,49)" fg:x="31724" fg:w="8"/><text x="62.6546%" y="111.50"></text></g><g><title>redirs`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (2,125 samples, 4.18%)</title><rect x="58.2422%" y="133" width="4.1801%" height="15" fill="rgb(213,87,29)" fg:x="29608" fg:w="2125"/><text x="58.4922%" y="143.50">redir..</text></g><g><title>redirs`alloc::raw_vec::finish_grow (1,951 samples, 3.84%)</title><rect x="58.5845%" y="117" width="3.8378%" height="15" fill="rgb(205,151,52)" fg:x="29782" fg:w="1951"/><text x="58.8345%" y="127.50">redi..</text></g><g><title>redirs`alloc::raw_vec::finish_grow (11 samples, 0.02%)</title><rect x="62.4223%" y="133" width="0.0216%" height="15" fill="rgb(253,215,39)" fg:x="31733" fg:w="11"/><text x="62.6723%" y="143.50"></text></g><g><title>redirs`core::fmt::Formatter::pad_integral (18 samples, 0.04%)</title><rect x="62.4439%" y="133" width="0.0354%" height="15" fill="rgb(221,220,41)" fg:x="31744" fg:w="18"/><text x="62.6939%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (7 samples, 0.01%)</title><rect x="62.6033%" y="117" width="0.0138%" height="15" fill="rgb(218,133,21)" fg:x="31825" fg:w="7"/><text x="62.8533%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (19 samples, 0.04%)</title><rect x="62.7036%" y="101" width="0.0374%" height="15" fill="rgb(221,193,43)" fg:x="31876" fg:w="19"/><text x="62.9536%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125170 (13 samples, 0.03%)</title><rect x="62.9849%" y="85" width="0.0256%" height="15" fill="rgb(240,128,52)" fg:x="32019" fg:w="13"/><text x="63.2349%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81912517a (7 samples, 0.01%)</title><rect x="63.0124%" y="85" width="0.0138%" height="15" fill="rgb(253,114,12)" fg:x="32033" fg:w="7"/><text x="63.2624%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81914f64a (8 samples, 0.02%)</title><rect x="63.0459%" y="85" width="0.0157%" height="15" fill="rgb(215,223,47)" fg:x="32050" fg:w="8"/><text x="63.2959%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81914f64c (9 samples, 0.02%)</title><rect x="63.0616%" y="85" width="0.0177%" height="15" fill="rgb(248,225,23)" fg:x="32058" fg:w="9"/><text x="63.3116%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81914f660 (9 samples, 0.02%)</title><rect x="63.0872%" y="85" width="0.0177%" height="15" fill="rgb(250,108,0)" fg:x="32071" fg:w="9"/><text x="63.3372%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81914f671 (12 samples, 0.02%)</title><rect x="63.1108%" y="85" width="0.0236%" height="15" fill="rgb(228,208,7)" fg:x="32083" fg:w="12"/><text x="63.3608%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81914f677 (34 samples, 0.07%)</title><rect x="63.1383%" y="85" width="0.0669%" height="15" fill="rgb(244,45,10)" fg:x="32097" fg:w="34"/><text x="63.3883%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81914f679 (11 samples, 0.02%)</title><rect x="63.2052%" y="85" width="0.0216%" height="15" fill="rgb(207,125,25)" fg:x="32131" fg:w="11"/><text x="63.4552%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81914f68d (7 samples, 0.01%)</title><rect x="63.2308%" y="85" width="0.0138%" height="15" fill="rgb(210,195,18)" fg:x="32144" fg:w="7"/><text x="63.4808%" y="95.50"></text></g><g><title>redirs`__rdl_alloc (10 samples, 0.02%)</title><rect x="63.2465%" y="85" width="0.0197%" height="15" fill="rgb(249,80,12)" fg:x="32152" fg:w="10"/><text x="63.4965%" y="95.50"></text></g><g><title>redirs`__rust_alloc (10 samples, 0.02%)</title><rect x="63.2662%" y="85" width="0.0197%" height="15" fill="rgb(221,65,9)" fg:x="32162" fg:w="10"/><text x="63.5162%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191251bb (6 samples, 0.01%)</title><rect x="63.3862%" y="69" width="0.0118%" height="15" fill="rgb(235,49,36)" fg:x="32223" fg:w="6"/><text x="63.6362%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191251fd (22 samples, 0.04%)</title><rect x="63.4295%" y="69" width="0.0433%" height="15" fill="rgb(225,32,20)" fg:x="32245" fg:w="22"/><text x="63.6795%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125207 (122 samples, 0.24%)</title><rect x="63.4806%" y="69" width="0.2400%" height="15" fill="rgb(215,141,46)" fg:x="32271" fg:w="122"/><text x="63.7306%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81912520b (11 samples, 0.02%)</title><rect x="63.7206%" y="69" width="0.0216%" height="15" fill="rgb(250,160,47)" fg:x="32393" fg:w="11"/><text x="63.9706%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125224 (23 samples, 0.05%)</title><rect x="63.7540%" y="69" width="0.0452%" height="15" fill="rgb(216,222,40)" fg:x="32410" fg:w="23"/><text x="64.0040%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81912523a (31 samples, 0.06%)</title><rect x="63.8189%" y="69" width="0.0610%" height="15" fill="rgb(234,217,39)" fg:x="32443" fg:w="31"/><text x="64.0689%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125262 (6 samples, 0.01%)</title><rect x="63.8976%" y="69" width="0.0118%" height="15" fill="rgb(207,178,40)" fg:x="32483" fg:w="6"/><text x="64.1476%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125265 (7 samples, 0.01%)</title><rect x="63.9094%" y="69" width="0.0138%" height="15" fill="rgb(221,136,13)" fg:x="32489" fg:w="7"/><text x="64.1594%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125289 (8 samples, 0.02%)</title><rect x="63.9330%" y="69" width="0.0157%" height="15" fill="rgb(249,199,10)" fg:x="32501" fg:w="8"/><text x="64.1830%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191252f2 (6 samples, 0.01%)</title><rect x="63.9960%" y="69" width="0.0118%" height="15" fill="rgb(249,222,13)" fg:x="32533" fg:w="6"/><text x="64.2460%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191252fe (6 samples, 0.01%)</title><rect x="64.0117%" y="69" width="0.0118%" height="15" fill="rgb(244,185,38)" fg:x="32541" fg:w="6"/><text x="64.2617%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125302 (7 samples, 0.01%)</title><rect x="64.0235%" y="69" width="0.0138%" height="15" fill="rgb(236,202,9)" fg:x="32547" fg:w="7"/><text x="64.2735%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125305 (7 samples, 0.01%)</title><rect x="64.0373%" y="69" width="0.0138%" height="15" fill="rgb(250,229,37)" fg:x="32554" fg:w="7"/><text x="64.2873%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125308 (13 samples, 0.03%)</title><rect x="64.0511%" y="69" width="0.0256%" height="15" fill="rgb(206,174,23)" fg:x="32561" fg:w="13"/><text x="64.3011%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125312 (38 samples, 0.07%)</title><rect x="64.0786%" y="69" width="0.0748%" height="15" fill="rgb(211,33,43)" fg:x="32575" fg:w="38"/><text x="64.3286%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125321 (11 samples, 0.02%)</title><rect x="64.1553%" y="69" width="0.0216%" height="15" fill="rgb(245,58,50)" fg:x="32614" fg:w="11"/><text x="64.4053%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81912532f (144 samples, 0.28%)</title><rect x="64.1947%" y="69" width="0.2833%" height="15" fill="rgb(244,68,36)" fg:x="32634" fg:w="144"/><text x="64.4447%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191253ce (10 samples, 0.02%)</title><rect x="64.4779%" y="69" width="0.0197%" height="15" fill="rgb(232,229,15)" fg:x="32778" fg:w="10"/><text x="64.7279%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191253e0 (24 samples, 0.05%)</title><rect x="64.4996%" y="69" width="0.0472%" height="15" fill="rgb(254,30,23)" fg:x="32789" fg:w="24"/><text x="64.7496%" y="79.50"></text></g><g><title>redirs`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (919 samples, 1.81%)</title><rect x="62.7410%" y="101" width="1.8078%" height="15" fill="rgb(235,160,14)" fg:x="31895" fg:w="919"/><text x="62.9910%" y="111.50">r..</text></g><g><title>redirs`alloc::raw_vec::finish_grow (642 samples, 1.26%)</title><rect x="63.2859%" y="85" width="1.2629%" height="15" fill="rgb(212,155,44)" fg:x="32172" fg:w="642"/><text x="63.5359%" y="95.50"></text></g><g><title>redirs`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (999 samples, 1.97%)</title><rect x="62.6170%" y="117" width="1.9651%" height="15" fill="rgb(226,2,50)" fg:x="31832" fg:w="999"/><text x="62.8670%" y="127.50">r..</text></g><g><title>redirs`alloc::raw_vec::finish_grow (17 samples, 0.03%)</title><rect x="64.5487%" y="101" width="0.0334%" height="15" fill="rgb(234,177,6)" fg:x="32814" fg:w="17"/><text x="64.7987%" y="111.50"></text></g><g><title>redirs`DYLD-STUB$$memcpy (9 samples, 0.02%)</title><rect x="64.5822%" y="117" width="0.0177%" height="15" fill="rgb(217,24,9)" fg:x="32831" fg:w="9"/><text x="64.8322%" y="127.50"></text></g><g><title>redirs`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (16 samples, 0.03%)</title><rect x="64.5999%" y="117" width="0.0315%" height="15" fill="rgb(220,13,46)" fg:x="32840" fg:w="16"/><text x="64.8499%" y="127.50"></text></g><g><title>redirs`core::fmt::Formatter::pad_integral (94 samples, 0.18%)</title><rect x="64.6314%" y="117" width="0.1849%" height="15" fill="rgb(239,221,27)" fg:x="32856" fg:w="94"/><text x="64.8814%" y="127.50"></text></g><g><title>redirs`core::fmt::Formatter::pad_integral::write_prefix (16 samples, 0.03%)</title><rect x="64.8163%" y="117" width="0.0315%" height="15" fill="rgb(222,198,25)" fg:x="32950" fg:w="16"/><text x="65.0663%" y="127.50"></text></g><g><title>redirs`redirs::message::message::Message::to_string (6,596 samples, 12.98%)</title><rect x="51.9474%" y="181" width="12.9751%" height="15" fill="rgb(211,99,13)" fg:x="26408" fg:w="6596"/><text x="52.1974%" y="191.50">redirs`redirs::mess..</text></g><g><title>redirs`redirs::message::serialise::serialise_message (5,631 samples, 11.08%)</title><rect x="53.8457%" y="165" width="11.0768%" height="15" fill="rgb(232,111,31)" fg:x="27373" fg:w="5631"/><text x="54.0957%" y="175.50">redirs`redirs::m..</text></g><g><title>redirs`redirs::message::serialise::serialise_message (4,187 samples, 8.24%)</title><rect x="56.6862%" y="149" width="8.2363%" height="15" fill="rgb(245,82,37)" fg:x="28817" fg:w="4187"/><text x="56.9362%" y="159.50">redirs`redi..</text></g><g><title>redirs`core::fmt::num::imp::_&lt;impl core::fmt::Display for u64&gt;::fmt (1,242 samples, 2.44%)</title><rect x="62.4793%" y="133" width="2.4432%" height="15" fill="rgb(227,149,46)" fg:x="31762" fg:w="1242"/><text x="62.7293%" y="143.50">re..</text></g><g><title>redirs`core::fmt::Formatter::pad_integral (38 samples, 0.07%)</title><rect x="64.8477%" y="117" width="0.0748%" height="15" fill="rgb(218,36,50)" fg:x="32966" fg:w="38"/><text x="65.0977%" y="127.50"></text></g><g><title>redirs`core::fmt::Formatter::pad_integral::write_prefix (38 samples, 0.07%)</title><rect x="64.8477%" y="101" width="0.0748%" height="15" fill="rgb(226,80,48)" fg:x="32966" fg:w="38"/><text x="65.0977%" y="111.50"></text></g><g><title>redirs`redirs::command::parse_command (7,258 samples, 14.28%)</title><rect x="50.6747%" y="197" width="14.2773%" height="15" fill="rgb(238,224,15)" fg:x="25761" fg:w="7258"/><text x="50.9247%" y="207.50">redirs`redirs::command..</text></g><g><title>redirs`redirs::message::serialise::serialise_message (15 samples, 0.03%)</title><rect x="64.9225%" y="181" width="0.0295%" height="15" fill="rgb(241,136,10)" fg:x="33004" fg:w="15"/><text x="65.1725%" y="191.50"></text></g><g><title>redirs`redirs::message::message::Message::to_string (10 samples, 0.02%)</title><rect x="64.9559%" y="197" width="0.0197%" height="15" fill="rgb(208,32,45)" fg:x="33021" fg:w="10"/><text x="65.2059%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125207 (12 samples, 0.02%)</title><rect x="65.3218%" y="181" width="0.0236%" height="15" fill="rgb(207,135,9)" fg:x="33207" fg:w="12"/><text x="65.5718%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81912520b (6 samples, 0.01%)</title><rect x="65.3454%" y="181" width="0.0118%" height="15" fill="rgb(206,86,44)" fg:x="33219" fg:w="6"/><text x="65.5954%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125224 (27 samples, 0.05%)</title><rect x="65.3631%" y="181" width="0.0531%" height="15" fill="rgb(245,177,15)" fg:x="33228" fg:w="27"/><text x="65.6131%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81912523a (45 samples, 0.09%)</title><rect x="65.4261%" y="181" width="0.0885%" height="15" fill="rgb(206,64,50)" fg:x="33260" fg:w="45"/><text x="65.6761%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff8191252ee (15 samples, 0.03%)</title><rect x="65.5421%" y="181" width="0.0295%" height="15" fill="rgb(234,36,40)" fg:x="33319" fg:w="15"/><text x="65.7921%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125312 (21 samples, 0.04%)</title><rect x="65.5756%" y="181" width="0.0413%" height="15" fill="rgb(213,64,8)" fg:x="33336" fg:w="21"/><text x="65.8256%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81912532f (24 samples, 0.05%)</title><rect x="65.6208%" y="181" width="0.0472%" height="15" fill="rgb(210,75,36)" fg:x="33359" fg:w="24"/><text x="65.8708%" y="191.50"></text></g><g><title>redirs`&lt;&amp;[u8] as nom::traits::InputTakeAtPosition&gt;::split_at_position1_complete (20 samples, 0.04%)</title><rect x="65.6857%" y="181" width="0.0393%" height="15" fill="rgb(229,88,21)" fg:x="33392" fg:w="20"/><text x="65.9357%" y="191.50"></text></g><g><title>redirs`&lt;&amp;str as nom::traits::FindToken&lt;u8&gt;&gt;::find_token (14 samples, 0.03%)</title><rect x="65.7251%" y="181" width="0.0275%" height="15" fill="rgb(252,204,47)" fg:x="33412" fg:w="14"/><text x="65.9751%" y="191.50"></text></g><g><title>redirs`&lt;&amp;[u8] as nom::traits::InputTakeAtPosition&gt;::split_at_position1_complete (20 samples, 0.04%)</title><rect x="65.9277%" y="165" width="0.0393%" height="15" fill="rgb(208,77,27)" fg:x="33515" fg:w="20"/><text x="66.1777%" y="175.50"></text></g><g><title>redirs`&lt;&amp;str as nom::traits::FindToken&lt;u8&gt;&gt;::find_token (46 samples, 0.09%)</title><rect x="65.9670%" y="165" width="0.0905%" height="15" fill="rgb(221,76,26)" fg:x="33535" fg:w="46"/><text x="66.2170%" y="175.50"></text></g><g><title>redirs`memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (27 samples, 0.05%)</title><rect x="66.0044%" y="149" width="0.0531%" height="15" fill="rgb(225,139,18)" fg:x="33554" fg:w="27"/><text x="66.2544%" y="159.50"></text></g><g><title>redirs`memchr::arch::x86_64::avx2::memchr::One::find_raw (20 samples, 0.04%)</title><rect x="66.0182%" y="133" width="0.0393%" height="15" fill="rgb(230,137,11)" fg:x="33561" fg:w="20"/><text x="66.2682%" y="143.50"></text></g><g><title>redirs`&lt;core::str::lossy::Utf8Chunks as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.05%)</title><rect x="66.0575%" y="165" width="0.0472%" height="15" fill="rgb(212,28,1)" fg:x="33581" fg:w="24"/><text x="66.3075%" y="175.50"></text></g><g><title>redirs`alloc::string::String::from_utf8_lossy (41 samples, 0.08%)</title><rect x="66.1047%" y="165" width="0.0807%" height="15" fill="rgb(248,164,17)" fg:x="33605" fg:w="41"/><text x="66.3547%" y="175.50"></text></g><g><title>redirs`&lt;core::str::lossy::Utf8Chunks as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.04%)</title><rect x="66.1441%" y="149" width="0.0413%" height="15" fill="rgb(222,171,42)" fg:x="33625" fg:w="21"/><text x="66.3941%" y="159.50"></text></g><g><title>redirs`core::num::_&lt;impl core::str::traits::FromStr for isize&gt;::from_str (35 samples, 0.07%)</title><rect x="66.1854%" y="165" width="0.0688%" height="15" fill="rgb(243,84,45)" fg:x="33646" fg:w="35"/><text x="66.4354%" y="175.50"></text></g><g><title>redirs`core::num::_&lt;impl i64&gt;::from_str_radix (22 samples, 0.04%)</title><rect x="66.2110%" y="149" width="0.0433%" height="15" fill="rgb(252,49,23)" fg:x="33659" fg:w="22"/><text x="66.4610%" y="159.50"></text></g><g><title>redirs`&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (261 samples, 0.51%)</title><rect x="65.7526%" y="181" width="0.5134%" height="15" fill="rgb(215,19,7)" fg:x="33426" fg:w="261"/><text x="66.0026%" y="191.50"></text></g><g><title>redirs`memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (6 samples, 0.01%)</title><rect x="66.2542%" y="165" width="0.0118%" height="15" fill="rgb(238,81,41)" fg:x="33681" fg:w="6"/><text x="66.5042%" y="175.50"></text></g><g><title>redirs`core::num::_&lt;impl core::str::traits::FromStr for isize&gt;::from_str (15 samples, 0.03%)</title><rect x="66.2759%" y="181" width="0.0295%" height="15" fill="rgb(210,199,37)" fg:x="33692" fg:w="15"/><text x="66.5259%" y="191.50"></text></g><g><title>redirs`&lt;&amp;[u8] as nom::traits::InputTakeAtPosition&gt;::split_at_position1_complete (12 samples, 0.02%)</title><rect x="66.5355%" y="165" width="0.0236%" height="15" fill="rgb(244,192,49)" fg:x="33824" fg:w="12"/><text x="66.7855%" y="175.50"></text></g><g><title>redirs`&lt;&amp;[u8] as nom::traits::InputTakeAtPosition&gt;::split_at_position1_complete (24 samples, 0.05%)</title><rect x="66.7303%" y="149" width="0.0472%" height="15" fill="rgb(226,211,11)" fg:x="33923" fg:w="24"/><text x="66.9803%" y="159.50"></text></g><g><title>redirs`memchr::arch::x86_64::avx2::memchr::One::find_raw (6 samples, 0.01%)</title><rect x="66.7893%" y="133" width="0.0118%" height="15" fill="rgb(236,162,54)" fg:x="33953" fg:w="6"/><text x="67.0393%" y="143.50"></text></g><g><title>redirs`&lt;&amp;str as nom::traits::FindToken&lt;u8&gt;&gt;::find_token (44 samples, 0.09%)</title><rect x="66.7775%" y="149" width="0.0866%" height="15" fill="rgb(220,229,9)" fg:x="33947" fg:w="44"/><text x="67.0275%" y="159.50"></text></g><g><title>redirs`memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (32 samples, 0.06%)</title><rect x="66.8011%" y="133" width="0.0629%" height="15" fill="rgb(250,87,22)" fg:x="33959" fg:w="32"/><text x="67.0511%" y="143.50"></text></g><g><title>redirs`memchr::arch::x86_64::avx2::memchr::One::find_raw (15 samples, 0.03%)</title><rect x="66.8345%" y="117" width="0.0295%" height="15" fill="rgb(239,43,17)" fg:x="33976" fg:w="15"/><text x="67.0845%" y="127.50"></text></g><g><title>redirs`&lt;core::str::lossy::Utf8Chunks as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.02%)</title><rect x="66.8640%" y="149" width="0.0216%" height="15" fill="rgb(231,177,25)" fg:x="33991" fg:w="11"/><text x="67.1140%" y="159.50"></text></g><g><title>redirs`alloc::string::String::from_utf8_lossy (44 samples, 0.09%)</title><rect x="66.8857%" y="149" width="0.0866%" height="15" fill="rgb(219,179,1)" fg:x="34002" fg:w="44"/><text x="67.1357%" y="159.50"></text></g><g><title>redirs`&lt;core::str::lossy::Utf8Chunks as core::iter::traits::iterator::Iterator&gt;::next (27 samples, 0.05%)</title><rect x="66.9191%" y="133" width="0.0531%" height="15" fill="rgb(238,219,53)" fg:x="34019" fg:w="27"/><text x="67.1691%" y="143.50"></text></g><g><title>redirs`core::num::_&lt;impl core::str::traits::FromStr for isize&gt;::from_str (52 samples, 0.10%)</title><rect x="66.9722%" y="149" width="0.1023%" height="15" fill="rgb(232,167,36)" fg:x="34046" fg:w="52"/><text x="67.2222%" y="159.50"></text></g><g><title>redirs`core::num::_&lt;impl i64&gt;::from_str_radix (35 samples, 0.07%)</title><rect x="67.0057%" y="133" width="0.0688%" height="15" fill="rgb(244,19,51)" fg:x="34063" fg:w="35"/><text x="67.2557%" y="143.50"></text></g><g><title>redirs`core::num::_&lt;impl i64&gt;::from_str_radix (7 samples, 0.01%)</title><rect x="67.0745%" y="149" width="0.0138%" height="15" fill="rgb(224,6,22)" fg:x="34098" fg:w="7"/><text x="67.3245%" y="159.50"></text></g><g><title>redirs`&lt;F as nom::internal::Parser&lt;I,O,E&gt;&gt;::parse (270 samples, 0.53%)</title><rect x="66.5690%" y="165" width="0.5311%" height="15" fill="rgb(224,145,5)" fg:x="33841" fg:w="270"/><text x="66.8190%" y="175.50"></text></g><g><title>redirs`memchr::arch::x86_64::memchr::memchr_raw::find_avx2 (6 samples, 0.01%)</title><rect x="67.0883%" y="149" width="0.0118%" height="15" fill="rgb(234,130,49)" fg:x="34105" fg:w="6"/><text x="67.3383%" y="159.50"></text></g><g><title>redirs`redirs::message::parse::parse_message (1,087 samples, 2.14%)</title><rect x="64.9756%" y="197" width="2.1382%" height="15" fill="rgb(254,6,2)" fg:x="33031" fg:w="1087"/><text x="65.2256%" y="207.50">r..</text></g><g><title>redirs`redirs::message::parse::parse_message (411 samples, 0.81%)</title><rect x="66.3054%" y="181" width="0.8085%" height="15" fill="rgb(208,96,46)" fg:x="33707" fg:w="411"/><text x="66.5554%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819146983 (11 samples, 0.02%)</title><rect x="67.4463%" y="181" width="0.0216%" height="15" fill="rgb(239,3,39)" fg:x="34287" fg:w="11"/><text x="67.6963%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125170 (7 samples, 0.01%)</title><rect x="67.5368%" y="133" width="0.0138%" height="15" fill="rgb(233,210,1)" fg:x="34333" fg:w="7"/><text x="67.7868%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81912517a (8 samples, 0.02%)</title><rect x="67.5565%" y="133" width="0.0157%" height="15" fill="rgb(244,137,37)" fg:x="34343" fg:w="8"/><text x="67.8065%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81914f660 (12 samples, 0.02%)</title><rect x="67.5899%" y="133" width="0.0236%" height="15" fill="rgb(240,136,2)" fg:x="34360" fg:w="12"/><text x="67.8399%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81914f677 (10 samples, 0.02%)</title><rect x="67.6214%" y="133" width="0.0197%" height="15" fill="rgb(239,18,37)" fg:x="34376" fg:w="10"/><text x="67.8714%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125207 (7 samples, 0.01%)</title><rect x="67.6784%" y="117" width="0.0138%" height="15" fill="rgb(218,185,22)" fg:x="34405" fg:w="7"/><text x="67.9284%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125224 (7 samples, 0.01%)</title><rect x="67.6922%" y="117" width="0.0138%" height="15" fill="rgb(225,218,4)" fg:x="34412" fg:w="7"/><text x="67.9422%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81912523a (10 samples, 0.02%)</title><rect x="67.7060%" y="117" width="0.0197%" height="15" fill="rgb(230,182,32)" fg:x="34419" fg:w="10"/><text x="67.9560%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff819125312 (9 samples, 0.02%)</title><rect x="67.7315%" y="117" width="0.0177%" height="15" fill="rgb(242,56,43)" fg:x="34432" fg:w="9"/><text x="67.9815%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81912532f (17 samples, 0.03%)</title><rect x="67.7512%" y="117" width="0.0334%" height="15" fill="rgb(233,99,24)" fg:x="34442" fg:w="17"/><text x="68.0012%" y="127.50"></text></g><g><title>redirs`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (144 samples, 0.28%)</title><rect x="67.5033%" y="165" width="0.2833%" height="15" fill="rgb(234,209,42)" fg:x="34316" fg:w="144"/><text x="67.7533%" y="175.50"></text></g><g><title>redirs`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (139 samples, 0.27%)</title><rect x="67.5132%" y="149" width="0.2734%" height="15" fill="rgb(227,7,12)" fg:x="34321" fg:w="139"/><text x="67.7632%" y="159.50"></text></g><g><title>redirs`alloc::raw_vec::finish_grow (64 samples, 0.13%)</title><rect x="67.6607%" y="133" width="0.1259%" height="15" fill="rgb(245,203,43)" fg:x="34396" fg:w="64"/><text x="67.9107%" y="143.50"></text></g><g><title>redirs`core::fmt::num::imp::_&lt;impl core::fmt::Display for u64&gt;::fmt (169 samples, 0.33%)</title><rect x="67.4876%" y="181" width="0.3324%" height="15" fill="rgb(238,205,33)" fg:x="34308" fg:w="169"/><text x="67.7376%" y="191.50"></text></g><g><title>redirs`core::fmt::Formatter::pad_integral (15 samples, 0.03%)</title><rect x="67.7905%" y="165" width="0.0295%" height="15" fill="rgb(231,56,7)" fg:x="34462" fg:w="15"/><text x="68.0405%" y="175.50"></text></g><g><title>libsystem_c.dylib`0x7ff8191c29c6 (17 samples, 0.03%)</title><rect x="68.2154%" y="165" width="0.0334%" height="15" fill="rgb(244,186,29)" fg:x="34678" fg:w="17"/><text x="68.4654%" y="175.50"></text></g><g><title>libsystem_c.dylib`0x7ff8191c29c7 (9 samples, 0.02%)</title><rect x="68.2489%" y="165" width="0.0177%" height="15" fill="rgb(234,111,31)" fg:x="34695" fg:w="9"/><text x="68.4989%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__sendto (15,936 samples, 31.35%)</title><rect x="68.2823%" y="165" width="31.3479%" height="15" fill="rgb(241,149,10)" fg:x="34712" fg:w="15936"/><text x="68.5323%" y="175.50">libsystem_kernel.dylib`__sendto</text></g><g><title>redirs`std::io::Write::write_all (16,330 samples, 32.12%)</title><rect x="67.8200%" y="181" width="32.1229%" height="15" fill="rgb(249,206,44)" fg:x="34477" fg:w="16330"/><text x="68.0700%" y="191.50">redirs`std::io::Write::write_all</text></g><g><title>redirs`std::net::udp::UdpSocket::send (156 samples, 0.31%)</title><rect x="99.6361%" y="165" width="0.3069%" height="15" fill="rgb(251,153,30)" fg:x="50651" fg:w="156"/><text x="99.8861%" y="175.50"></text></g><g><title>redirs`redirs::message::serialise::serialise_message (16,697 samples, 32.84%)</title><rect x="67.1139%" y="197" width="32.8448%" height="15" fill="rgb(239,152,38)" fg:x="34118" fg:w="16697"/><text x="67.3639%" y="207.50">redirs`redirs::message::serialise::serialise_message</text></g><g><title>redirs`std::net::udp::UdpSocket::send (8 samples, 0.02%)</title><rect x="99.9430%" y="181" width="0.0157%" height="15" fill="rgb(249,139,47)" fg:x="50807" fg:w="8"/><text x="100.1930%" y="191.50"></text></g><g><title>redirs`redirs::server::handle_client (50,632 samples, 99.60%)</title><rect x="0.3954%" y="213" width="99.5987%" height="15" fill="rgb(244,64,35)" fg:x="201" fg:w="50632"/><text x="0.6454%" y="223.50">redirs`redirs::server::handle_client</text></g><g><title>redirs`std::io::Write::write_all (18 samples, 0.04%)</title><rect x="99.9587%" y="197" width="0.0354%" height="15" fill="rgb(216,46,15)" fg:x="50815" fg:w="18"/><text x="100.2087%" y="207.50"></text></g><g><title>all (50,836 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(250,74,19)" fg:x="0" fg:w="50836"/><text x="0.2500%" y="319.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (50,834 samples, 100.00%)</title><rect x="0.0039%" y="293" width="99.9961%" height="15" fill="rgb(249,42,33)" fg:x="2" fg:w="50834"/><text x="0.2539%" y="303.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (50,833 samples, 99.99%)</title><rect x="0.0059%" y="277" width="99.9941%" height="15" fill="rgb(242,149,17)" fg:x="3" fg:w="50833"/><text x="0.2559%" y="287.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>redirs`std::sys::pal::unix::thread::Thread::new::thread_start (50,830 samples, 99.99%)</title><rect x="0.0118%" y="261" width="99.9882%" height="15" fill="rgb(244,29,21)" fg:x="6" fg:w="50830"/><text x="0.2618%" y="271.50">redirs`std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>redirs`core::ops::function::FnOnce::call_once{{vtable.shim}} (50,829 samples, 99.99%)</title><rect x="0.0138%" y="245" width="99.9862%" height="15" fill="rgb(220,130,37)" fg:x="7" fg:w="50829"/><text x="0.2638%" y="255.50">redirs`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>redirs`std::sys::backtrace::__rust_begin_short_backtrace (50,829 samples, 99.99%)</title><rect x="0.0138%" y="229" width="99.9862%" height="15" fill="rgb(211,67,2)" fg:x="7" fg:w="50829"/><text x="0.2638%" y="239.50">redirs`std::sys::backtrace::__rust_begin_short_backtrace</text></g></svg></svg>